/*
*
* File name: ModulesFCD_FTP.esql
*
* Purpose: ESQL con modulos generales para servicios ftp 
*
* Authors: Assist
*
* Version: 1.0
*
* @copyright Assist All rights reserved.
*
*/
BROKER SCHEMA com.ibus.common.modules.fcd


--definicion de constantes
DECLARE FTP_EMPTY_STRING 		CONSTANT CHARACTER	'';
DECLARE FTP_FACADE_RQ_TRACE 	CONSTANT INTEGER 1;
DECLARE FTP_FACADE_RS_TRACE 	CONSTANT INTEGER 1;
DECLARE FTP_NOT_AVAILABLE 		CONSTANT CHARACTER 'NA';
DECLARE FTP_ServiceName 		EXTERNAL CHARACTER '';
DECLARE FTP_OperationName 		EXTERNAL CHARACTER '';

/*
 * Modulo para direccionamiento de peticiones 
 *
 */
CREATE COMPUTE MODULE RouteFTPMsgRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Crear cabeceras de mensaje
		CREATE FIELD OutputRoot.Properties;
		CREATE FIELD OutputRoot.MQMD;
		CREATE FIELD OutputRoot.MQRFH2;
		CREATE FIELD OutputRoot.MQRFH2.usr;
		
		DECLARE refUsr REFERENCE TO OutputRoot.MQRFH2.usr;
		CREATE FIELD refUsr.log;
		CREATE FIELD refUsr.response.FTP;
		DECLARE refLog REFERENCE TO refUsr.log;
		DECLARE refResponseFTP REFERENCE TO refUsr.response.FTP;
		
		SET refResponseFTP.File 				= InputLocalEnvironment.File;
		SET refResponseFTP.WildcardMatch 		= InputLocalEnvironment.Wildcard.WildcardMatch;
		SET refResponseFTP.BLOB 				= InputRoot.BLOB;

		--Almacenar informacíón de Log
		SET refLog.transactionId			= UUIDASCHAR;
		SET refLog.serviceName				= FTP_ServiceName;
		SET refLog.operationName			= FTP_OperationName;
		SET refLog.traceId					= FTP_FACADE_RQ_TRACE;
		SET refLog.consumerName 			= COALESCE(SUBSTRING(refResponseFTP.File.Name BEFORE '.'), FTP_NOT_AVAILABLE);
		SET refLog.transactionDate  		= CURRENT_TIMESTAMP;			
		SET refLog.prevTransactionDate  	= refLog.transactionDate;
		SET refLog.initialTransactionDate  	= refLog.transactionDate;
		SET refLog.ipConsumer				= COALESCE(refResponseFTP.File.Directory,EMPTY_STRING);
		
		--Salvar datos del servicio
		SET Environment.Variables.usr = refUsr;
		
		DECLARE srvKeyName CHARACTER UPPER(FTP_ServiceName || UNDERSCORE || FTP_OperationName );
		DECLARE srvConfiguration CHARACTER '';
		DECLARE SRV_CONF_TAG CONSTANT CHARACTER '<srvConfiguration>';

		IF STARTSWITH(srvConfiguration, SRV_CONF_TAG) THEN
			
			DECLARE srvData ROW;
			DECLARE refsrvData REFERENCE TO srvData.data;
			CREATE LASTCHILD OF refsrvData DOMAIN('XMLNSC') PARSE(srvConfiguration CCSID 1208);
	    	MOVE refsrvData LASTCHILD;
	    	MOVE refsrvData LASTCHILD;
	    	MOVE refsrvData LASTCHILD;
			
			--Informacion del servicio obtenida de catalogo
			CREATE FIELD refUsr.srvConfiguration;	
			DECLARE refSrvConfiguration REFERENCE TO refUsr.srvConfiguration;
			
			--referencia data configuracion servicio
			SET refSrvConfiguration = refsrvData; 
	
			--Validar información de la configuración del servicio tomado desde Catalogo
			IF refSrvConfiguration.status = '1' THEN
			
				SET refLog.serviceName		= refSrvConfiguration.name;
				SET refLog.operationName	= refSrvConfiguration.operation;
						
				--Procesa Listado de Servicios Destino -- servicio atomico
				SET refLog.providerName		= COALESCE(refSrvConfiguration.serviceList.provider[1].name, NOT_AVAILABLE);
				
				--Actualizar datos del servicio en environment
				SET Environment.Variables.usr = NULL;
				SET Environment.Variables.usr = refUsr;
	
				--Copia de las propiedades del archivo para auditoria
				CREATE FIELD OutputRoot.XMLNSC.FileInProperties;
				SET OutputRoot.XMLNSC.FileInProperties = InputLocalEnvironment;
				
				-- Tiempo Cola Base de Datos (Auditoria)
				SET OutputRoot.MQMD.Expiry = -1;
	
				--Enviar a auditoría
				PROPAGATE TO TERMINAL 'out1' DELETE NONE;
				
				--Copia de mensaje recibido desde fileSystem
				SET OutputRoot.XMLNSC		= NULL;
				SET OutputRoot.BLOB 		= InputRoot.BLOB;
				
				--Tiempo Cola Servicio Especifico
				SET OutputRoot.MQMD.Expiry = 1800;
				
				--Establecer cola flujo destino
				SET OutputRoot.MQRFH2.usr.srvConfiguration.step = '1';
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = refSrvConfiguration.serviceList.provider[1].queueName;
			
			ELSE
				THROW USER EXCEPTION CATALOG 'FCD' MESSAGE 002 VALUES ('Configuración de servicio.', 'Servicio Inactivo' || srvKeyName );
			END IF;
		ELSE
				--Salvar datos del servicio en environment
				SET Environment.Variables.usr = refUsr;
				THROW USER EXCEPTION CATALOG 'FCD' MESSAGE 001 VALUES ('Configuración de servicio.', 
																		'Servicio No Encontrado en Catalogo ' || srvKeyName || srvConfiguration);
		END IF;
				
		RETURN TRUE;
	END;
END MODULE;


/*
 * Crea el mensaje de excepción cuando existe un error en el flujo de la fachada 
 */
CREATE COMPUTE MODULE GetFTPInfoError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE codeError, nameError, descError CHARACTER '';
		
		--Poner información de configuración en cabecera de mensaje.
		CREATE FIELD OutputRoot.MQMD;
		CREATE FIELD OutputRoot.MQRFH2;
		
		SET OutputRoot.MQRFH2.usr 		= Environment.Variables.usr;
		
		--Copiar LocalEnvironment
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		--Declarar referencia a lista de excepciones técnicas.
		DECLARE refExceptionList REFERENCE TO InputExceptionList;
		MOVE refExceptionList FIRSTCHILD;
		DECLARE exceptionDetails ROW;

		CALL com.ibus.common.procedures.util.getDescriptionExceptionList(refExceptionList, exceptionDetails);
	
		CREATE FIELD OutputRoot.XMLNSC.exceptionReq.exception;
		DECLARE refOutException REFERENCE TO OutputRoot.XMLNSC.exceptionReq.exception;

		CALL com.ibus.common.procedures.general.createErrorLogMessage(refOutException,exceptionDetails);
		
		--Enviar a registro de error
		RETURN TRUE;
	END;
END MODULE;