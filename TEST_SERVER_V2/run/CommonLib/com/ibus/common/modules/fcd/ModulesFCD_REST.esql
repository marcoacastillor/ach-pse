/*
*
* File name: ModulesFCD_REST.esql
*
* Purpose: ESQL con moduleos generales para servicios soap web services 
*
* Authors: Assist
*
* Version: 1.0
*
* @copyright Assist All rights reserved.
*
*/
BROKER SCHEMA com.ibus.common.modules.fcd


--definicion de constantes
DECLARE REST_EMPTY_STRING 		CONSTANT CHARACTER	'';
DECLARE REST_FACADE_RQ_TRACE 	CONSTANT INTEGER 1;
DECLARE REST_FACADE_RS_TRACE 	CONSTANT INTEGER 1;
DECLARE REST_UNDERSCORE 		CONSTANT CHARACTER '_';
DECLARE REST_NOT_AVAILABLE 		CONSTANT CHARACTER 'NA';
DECLARE REST_REQUEST_MSG 		CONSTANT CHARACTER	'Rq';
DECLARE REST_RESPONSE_MSG 		CONSTANT CHARACTER	'Rs';
DECLARE REST_REQUEST_WRAPPER 	CONSTANT CHARACTER	'Req';
DECLARE REST_RESPONSE_WRAPPER 	CONSTANT CHARACTER	'Resp';

DECLARE service 	EXTERNAL CHARACTER '';
DECLARE queueName 	EXTERNAL CHARACTER '';
DECLARE replyToQ	EXTERNAL CHARACTER 10;
DECLARE timeOutS 	EXTERNAL INTEGER 10;

/*
 * Modulo para direccionamiento de peticiones 
 *
 */
CREATE COMPUTE MODULE RouteRestMsgRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Crear cabeceras de mensaje
		CREATE FIELD OutputRoot.Properties;
		CREATE FIELD OutputRoot.MQMD;
		CREATE FIELD OutputRoot.MQRFH2;
		CREATE FIELD OutputRoot.MQRFH2.usr;
		
		DECLARE refUsr REFERENCE TO OutputRoot.MQRFH2.usr;
		CREATE FIELD refUsr.log;
		CREATE FIELD refUsr.response.REST;
		DECLARE refLog REFERENCE TO refUsr.log;
		DECLARE refResponseREST REFERENCE TO refUsr.response.REST;
		
		SET refResponseREST.replyIdentifier = InputLocalEnvironment.Destination.HTTP.RequestIdentifier;
		SET refResponseREST.replyToQ		= replyToQ;
		SET refResponseREST.HTTP = InputLocalEnvironment.HTTP;
		SET refResponseREST.REST = InputLocalEnvironment.REST;
		SET refResponseREST.HTTPRequestHeader = InputRoot.HTTPInputHeader;
		SET refResponseREST.META.messageUuid 	= InputRoot.HTTPInputHeader."Message-Uuid";
		SET refResponseREST.META.requestDt 		= CURRENT_TIMESTAMP; 
		SET refResponseREST.META.requestAppId 	= COALESCE(InputRoot.HTTPInputHeader."Request-App-Id", 'NULL');
		
		
		--obtener portType y operation del llamado
		DECLARE refContext REFERENCE TO InputLocalEnvironment.REST.Input;  
		DECLARE params CHARACTER refContext.Parameters;
		
		--Almacenar informacíón de Log
		SET refLog.transactionId			= COALESCE(InputRoot.HTTPInputHeader."Message-Id", UUIDASCHAR);
		SET refLog.serviceName				= service;
		SET refLog.operationName			= refContext.Method || ' | ' || refContext.Path;
		SET refLog.operationId				= refContext.Operation;
		SET refLog.traceId					= REST_FACADE_RQ_TRACE;
		SET refLog.consumerName 			= COALESCE(InputRoot.HTTPInputHeader."X-Remote-Host", NOT_AVAILABLE);
		SET refLog.transactionDate  		= CURRENT_TIMESTAMP;			
		SET refLog.prevTransactionDate  	= refLog.transactionDate;
		SET refLog.initialTransactionDate  	= refLog.transactionDate;
		SET refLog.ipConsumer				= COALESCE(InputRoot.HTTPInputHeader."X-Remote-Addr",EMPTY_STRING);
		
		--Salvar datos del servicio
		SET Environment.Variables.usr = refUsr;
					
		-- Tiempo Cola Base de Datos (Auditoria)
		SET OutputRoot.MQMD.Expiry = -1;
		
		IF EXISTS(InputRoot.JSON[]) THEN
			SET OutputRoot.JSON = InputRoot.JSON;	
		ELSE
			CREATE FIELD OutputRoot.JSON.Data.Empty;
		END IF;

		--Enviar a auditoría
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		
		--Tiempo Cola Servicio Especifico -- UDP o Catalogo?
		SET OutputRoot.MQMD.Expiry = COALESCE(CAST(timeOutS AS INTEGER) * 10 + 5, 5);
		
		--Establecer cola flujo destino
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = queueName;
				
		RETURN TRUE;
	END;
END MODULE;


/*
 * Crea el mensaje de excepción cuando existe un error en el flujo de la fachada 
 */
CREATE COMPUTE MODULE GetRESTInfoError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE codeError, nameError, descError CHARACTER '';
		
		--Poner información de configuración en cabecera de mensaje.
		CREATE FIELD OutputRoot.MQMD;
		CREATE FIELD OutputRoot.MQRFH2;
		
		SET OutputRoot.MQRFH2.usr 		= Environment.Variables.usr;
		
		--Eliminar cabeceras SOAP, HTTP
		SET OutputRoot.SOAP 			= NULL;
		SET OutputRoot.HTTPInputHeader 	= NULL;
		SET OutputRoot.Properties 		= NULL;
		
		--Copiar LocalEnvironment
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		--Declarar referencia a lista de excepciones técnicas.
		DECLARE refExceptionList REFERENCE TO InputExceptionList;
		MOVE refExceptionList FIRSTCHILD;
		DECLARE exceptionDetails ROW;

		CALL com.ibus.common.procedures.util.getDescriptionExceptionList(refExceptionList, exceptionDetails);
	
		CREATE FIELD OutputRoot.XMLNSC.exceptionReq.exception;
		DECLARE refOutException REFERENCE TO OutputRoot.XMLNSC.exceptionReq.exception;

		CALL com.ibus.common.procedures.general.createErrorLogMessage(refOutException,exceptionDetails);
		
		--Enviar a registro de error
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		
		--limpiar cabeceras
		SET OutputRoot.MQMD 	= NULL;
		SET OutputRoot.MQRFH2	= NULL;
		SET OutputRoot.XMLNSC 	= NULL;
		CREATE FIELD OutputRoot.HTTPResponseHeader;
		
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE refOut REFERENCE TO OutputRoot.JSON.Data;
		
		DECLARE refEnvUsr REFERENCE TO Environment.Variables.usr;
		SET refEnvUsr.exception = exceptionDetails;
		SET refEnvUsr.HTTPInputHeader= InputRoot.HTTPInputHeader;
	
		--validar si se crearon las cabeceras para respuesta REST en MQRFH2
		IF(NOT EXISTS(refEnvUsr.response[])) THEN
			CREATE FIELD  refEnvUsr.response.REST;
			DECLARE refResponseREST REFERENCE TO refEnvUsr.response.REST;
			DECLARE refInp REFERENCE TO InputRoot.JSON.Data;
			MOVE refInp LASTCHILD;
			SET refResponseREST.replyIdentifier = InputLocalEnvironment.Destination.HTTP.RequestIdentifier;
			SET refResponseREST.msgWrapper = REPLACE(FIELDNAME(refInp.Body.*), REST_REQUEST_WRAPPER, REST_EMPTY_STRING) || REST_RESPONSE_WRAPPER ;
			
		END IF;
		
		SET refEnvUsr.errorCode = 500;
		SET OutputRoot.HTTPReplyHeader."Content-Type" = 'application/json';
		SET OutputRoot.HTTPReplyHeader."X-Original-HTTP-Status-Code" = 500;
		
		--SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 500;    
		--X-Original-HTTP-Status-Line = 'HTTP/1.1 200 OK';

		SET refEnvUsr.errorDesc = 'Internal error FCD';
		CALL com.ibus.common.procedures.general.createRESTErrorsMessage(refExceptionList,refEnvUsr,refOut);
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * Crea el mensaje de log para enviar a registrar 
 */
CREATE COMPUTE MODULE LogRESTResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--Crear cabeceras de mensaje
		CREATE FIELD OutputRoot.Properties;
		CREATE FIELD OutputRoot.MQMD;
		CREATE FIELD OutputRoot.MQRFH2;
		
		SET OutputRoot.MQRFH2.usr = Environment.Variables.usr;
		
		--Guardar información de environment para envío de error, auditoría 
		DECLARE refInp REFERENCE TO InputRoot.JSON.Data;
		
		-- VALORES PARA AUDITORIA
		DECLARE refLog REFERENCE TO OutputRoot.MQRFH2.usr.log;
		SET refLog.prevTransactionDate 	= refLog.transactionDate;
		SET refLog.transactionDate 		= CURRENT_TIMESTAMP;
		SET refLog.traceId 				= REST_FACADE_RS_TRACE;
		SET refLog.statusCode			= COALESCE(refInp.*[<].RespuestaCodigo, refInp.RespuestaCodigo, refInp.*[<].Codigo );
		SET refLog.serverCode			= COALESCE(refLog.serverCode, EMPTY_STRING);
		SET refLog.providerName			= COALESCE(refLog.providerName, NOT_AVAILABLE);
		
		--habilitar parametro para registro de log
		DECLARE refSrvConfiguration REFERENCE TO  OutputRoot.MQRFH2.usr.srvConfiguration;
		DECLARE SAVE_IN_DB CONSTANT CHARACTER '1';
		SET refSrvConfiguration.logs.trace 	= COALESCE(refSrvConfiguration.logs.trace, FACADE_RS_TRACE);
		SET refSrvConfiguration.logs.type	= COALESCE(refSrvConfiguration.logs.type, SAVE_IN_DB);

		SET OutputRoot.JSON  =  InputRoot.JSON;
		
	END;
END MODULE;

/*
* Obtiene el identificador para retornar respuesta web service
*/
CREATE COMPUTE MODULE GetReplyIdentifier
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Pasar mensajes.
		SET OutputRoot 	= InputRoot;
		SET OutputRoot.Properties.CodedCharSetId	= 1208;
		
		--Declarar referencia
		DECLARE refMQRFH2 REFERENCE TO OutputRoot.MQRFH2;
		--Guardar variables 	
		SET Environment.Variables.usr = refMQRFH2.usr;
		
		--Tomar identificador para responder a cliente
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier 	= CAST(refMQRFH2.usr.response.REST.replyIdentifier AS BLOB);

		SET OutputRoot.MQMD 	= NULL;
		SET OutputRoot.MQRFH2 	= NULL;
		RETURN TRUE;
	END;
END MODULE;
		
/*
 * Modulo para direccionamiento de peticiones 
 *
 */
CREATE COMPUTE MODULE RouteRestMsgRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF NOT EXISTS(InputRoot.JSON[]) THEN
			CREATE FIELD OutputRoot.JSON.Data;
			DECLARE refOut REFERENCE TO OutputRoot.JSON.Data;
			SET refOut.meta = Environment.Variables.usr.response.REST.META;
			CALL com.ibus.common.procedures.general.createRESTErrorMessage(504, 'Gateway Timeout', 'ACE-504', 'No se recibio respuesta en el tiempo especificado', refOut);			
			SET OutputRoot.HTTPReplyHeader."Content-Type" = 'application/json';
			SET OutputRoot.HTTPReplyHeader."X-Original-HTTP-Status-Code" = 504;
			
		ELSE 
			--TRANSFORMAR EL MENSAJE DE RESPUESTA SI SE REQUIERE O COPIARLO SIN CAMBIOS
			SET OutputRoot.JSON = InputRoot.JSON;			
			DECLARE errCode INTEGER COALESCE(CAST(InputRoot.JSON.Data.statusCode AS INTEGER), 200);
			DECLARE errDesc CHARACTER COALESCE(InputRoot.JSON.Data.statusDesc, 'OK');
			SET OutputRoot.HTTPReplyHeader."Content-Type" = 'application/json';
			SET OutputRoot.HTTPReplyHeader."X-Original-HTTP-Status-Code" = errCode;
		END IF;		
		
		/*
		SET OutputRoot.JSON = NULL;
		
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE refOut REFERENCE TO OutputRoot.JSON.Data;
		SET refOut.meta = Environment.Variables.usr.response.REST.META;
		CALL com.ibus.common.procedures.general.createRESTErrorMessage(200, 'OK', 'ACE-504', 'No se recibio respuesta en el tiempo especificado', refOut);
		SET refOut.data.status = '0';			
		SET OutputRoot.HTTPReplyHeader."Content-Type" = 'application/json';
		SET OutputRoot.HTTPReplyHeader."X-Original-HTTP-Status-Code" = 200;
		*/
		
				
		RETURN TRUE;
	END;
END MODULE;


/*
 * Crea el mensaje de NOT IMPLEMENTED 
 */
CREATE COMPUTE MODULE CreateRestNIMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.HTTPReplyHeader."Content-Type" = 'application/json';
		SET OutputRoot.HTTPReplyHeader."X-Original-HTTP-Status-Code" = 501;
		
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE refOut REFERENCE TO OutputRoot.JSON.Data;
		DECLARE refEnvUsr REFERENCE TO Environment.Variables.usr;
			
		SET refOut.meta.messageUid 	= InputRoot.HTTPInputHeader."Message-Uid";
		SET refOut.meta.requestDt 		= CURRENT_TIMESTAMP; 
		SET refOut.meta.requestAppId 	= COALESCE(InputRoot.HTTPInputHeader.AppId, 'NULL');
		
		SET refOut.statusCode = 501;
		SET refOut.statusDesc = 'Not Implemented'; 
		
		CREATE FIELD refOut.errors IDENTITY (JSON.Array)errors;	
		SET refOut.errors.Item[1].code = 501;
		SET refOut.errors.Item[1].detail = 'Recurso no implementado';
		RETURN TRUE;		
	END;
END MODULE;


/*
 * Crea el mensaje de OK HEALTH 
 */
CREATE COMPUTE MODULE CreateRestHealthMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.HTTPReplyHeader."Content-Type" = 'application/json';
		SET OutputRoot.HTTPReplyHeader."X-Original-HTTP-Status-Code" = 200;
		
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE refOut REFERENCE TO OutputRoot.JSON.Data;
		DECLARE refEnvUsr REFERENCE TO Environment.Variables.usr;
			
		SET refOut.meta.messageUid 	= InputRoot.HTTPInputHeader."Message-Uid";
		SET refOut.meta.requestDt 		= CURRENT_TIMESTAMP; 
		SET refOut.meta.requestAppId 	= COALESCE(InputRoot.HTTPInputHeader.AppId, 'NULL');
		
		SET refOut.statusCode = 200;
		SET refOut.statusDesc = 'ok'; 
		
		CREATE FIELD refOut.errors IDENTITY (JSON.Array)errors;	
		SET refOut.errors.Item[1].code = 200;
		SET refOut.errors.Item[1].detail = 'APP OK';
		RETURN TRUE;		
	END;
END MODULE;