/*
*
* File name: ModulesFCD_WS.esql
*
* Purpose: ESQL con moduleos genrerales para servicios soap web services 
*
* Authors: Assist
*

*
* Version: 1.0
*
* @copyright Assist All rights reserved.
*
*/
BROKER SCHEMA com.ibus.common.modules.fcd

--definicion de constantes
DECLARE EMPTY_STRING CONSTANT CHARACTER	'';
DECLARE FACADE_RQ_TRACE CONSTANT INTEGER 1;
DECLARE FACADE_RS_TRACE CONSTANT INTEGER 1;
DECLARE UNDERSCORE CONSTANT CHARACTER '_';
DECLARE NOT_AVAILABLE CONSTANT CHARACTER 'NA';
DECLARE REQUEST_MSG CONSTANT CHARACTER	'Rq';
DECLARE RESPONSE_MSG CONSTANT CHARACTER	'Rs';
DECLARE REQUEST_WRAPPER CONSTANT CHARACTER	'Request';
DECLARE RESPONSE_WRAPPER CONSTANT CHARACTER	'Response';

/*
 * Modulo para direccionamiento de peticiones 
 *
 */
CREATE COMPUTE MODULE RouteWebServiceRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Crear cabeceras de mensaje
		CREATE FIELD OutputRoot.Properties;
		CREATE FIELD OutputRoot.MQMD;
		CREATE FIELD OutputRoot.MQRFH2;
		CREATE FIELD OutputRoot.MQRFH2.usr;
		
		DECLARE refUsr REFERENCE TO OutputRoot.MQRFH2.usr;
		CREATE FIELD refUsr.log;
		CREATE FIELD refUsr.response.WS;
		CREATE FIELD refUsr.request.header;
		DECLARE rqHeader REFERENCE TO refUsr.request.header;
		DECLARE refLog REFERENCE TO refUsr.log;
		DECLARE refResponseWS REFERENCE TO refUsr.response.WS;
		
		DECLARE refInp REFERENCE TO InputRoot.XMLNSC;
		MOVE refInp LASTCHILD;
		
		SET refResponseWS.replyIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
		SET refResponseWS.msgWrapper = REPLACE(FIELDNAME(refInp), REQUEST_WRAPPER, EMPTY_STRING) || RESPONSE_WRAPPER ;
		SET refResponseWS.ns = FIELDNAMESPACE(refInp);
		
		SET rqHeader = InputLocalEnvironment.SOAP.Envelope.InRequest.*.SOAP.Header;
		
		--move to  message request node 
		MOVE refInp LASTCHILD; 
		SET refResponseWS.respMessage = REPLACE(FIELDNAME(refInp), REQUEST_MSG, RESPONSE_MSG);
		SET refResponseWS.ns1 = FIELDNAMESPACE(refInp);		
		SET refResponseWS.ns2 = COALESCE(FIELDNAMESPACE(refInp.*:RqUID), FIELDNAMESPACE(refInp));
		
		--obtener portType y operation del llamado
		DECLARE refContext REFERENCE TO InputLocalEnvironment.SOAP.Envelope.InRequest.*.SOAP.Context;  
		DECLARE portType CHARACTER refContext.portType;
		DECLARE operation CHARACTER refContext.operation;
		
		--Almacenar informacíón de Log
		SET refLog.transactionId			= COALESCE(refInp.*:RqUID,UUIDASCHAR);
		SET refLog.serviceName				= portType;
		SET refLog.operationName			= operation;
		SET refLog.traceId					= FACADE_RQ_TRACE;
		SET refLog.consumerName 			= COALESCE(refInp.*:NetworkTrnInfo.*:NetworkOwner, NOT_AVAILABLE);
		SET refLog.transactionDate  		= CURRENT_TIMESTAMP;			
		SET refLog.prevTransactionDate  	= refLog.transactionDate;
		SET refLog.initialTransactionDate  	= refLog.transactionDate;
		SET refLog.ipConsumer				= COALESCE(InputRoot.HTTPInputHeader."X-Remote-Addr",EMPTY_STRING);
		
		--Salvar datos del servicio
		SET Environment.Variables.usr = refUsr;
		
		DECLARE srvKeyName CHARACTER UPPER(portType || UNDERSCORE || operation );
		DECLARE srvConfiguration CHARACTER '';--com.ibus.common.functions.global.cache.getServiceConfiguration(srvKeyName);
		DECLARE SRV_CONF_TAG CONSTANT CHARACTER '<srvConfiguration>';

		IF STARTSWITH(srvConfiguration, SRV_CONF_TAG) THEN
			
			DECLARE srvData ROW;
			DECLARE refsrvData REFERENCE TO srvData.data;
			CREATE LASTCHILD OF refsrvData DOMAIN('XMLNSC') PARSE(srvConfiguration CCSID 1208);
	    	MOVE refsrvData LASTCHILD;
	    	MOVE refsrvData LASTCHILD;
	    	MOVE refsrvData LASTCHILD;
			
			--Informacion del servicio obtenida de catalogo
			CREATE FIELD refUsr.srvConfiguration;	
			DECLARE refSrvConfiguration REFERENCE TO refUsr.srvConfiguration;
			
			--referencia data configuracion servicio
			SET refSrvConfiguration = refsrvData; 
	
			--Validar información de la configuración del servicio tomado desde Catalogo
			IF refSrvConfiguration.status = '1' THEN
			
				SET refLog.serviceName		= refSrvConfiguration.name;
				SET refLog.operationName	= refSrvConfiguration.operation;
				
				--obtener referencias
				MOVE refInp PARENT;
				MOVE refInp PARENT;
				
				--SET refLog.ref1 = EVAL('COALESCE(refInp.' || refSrvConfiguration.reference1 || ', '''')');
				--SET refLog.ref2 = EVAL('COALESCE(refInp.' || refSrvConfiguration.reference2 || ', '''')');
				--SET refLog.ref3 = EVAL('COALESCE(refInp.' || refSrvConfiguration.reference3 || ', '''')');
				
				--Procesa Listado de Servicios Destino -- servicio atomico
				SET refLog.providerName		= COALESCE(refSrvConfiguration.serviceList.provider[1].name, NOT_AVAILABLE);
				
				--Actualizar datos del servicio en environment
				SET Environment.Variables.usr = NULL;
				SET Environment.Variables.usr = refUsr;
	
				--Copia de mensaje recibido desde cliente
				SET OutputRoot.XMLNSC = InputRoot.XMLNSC;	
				
				-- Tiempo Cola Base de Datos (Auditoria)
				SET OutputRoot.MQMD.Expiry = -1;
	
				--Enviar a auditoría
				PROPAGATE TO TERMINAL 'out1' DELETE NONE;
				
				--Tiempo Cola Servicio Especifico -- UDP o Catalogo?
				SET OutputRoot.MQMD.Expiry = 1800; --COALESCE(CAST(100 AS INTEGER), 100);
				
				--Establecer cola flujo destino
				SET OutputRoot.MQRFH2.usr.srvConfiguration.step = '1';
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = refSrvConfiguration.serviceList.provider[1].queueName;
			
			ELSE
				THROW USER EXCEPTION CATALOG 'FCD' MESSAGE 002 VALUES ('Configuración de servicio.', 'Servicio Inactivo' || srvKeyName );
			END IF;
		ELSE
				--Salvar datos del servicio en environment
				SET Environment.Variables.usr = refUsr;
				THROW USER EXCEPTION CATALOG 'FCD' MESSAGE 001 VALUES ('Configuración de servicio.', 
																		'Servicio No Encontrado en Catalogo ' || srvKeyName || srvConfiguration);
		END IF;
				
		RETURN TRUE;
	END;
END MODULE;


/*
 * Crea el mensaje de excepción cuando existe un error en el flujo de la fachada 
 */
CREATE COMPUTE MODULE GetWSInfoError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE codeError, nameError, descError CHARACTER '';
		
		--Poner información de configuración en cabecera de mensaje.
		CREATE FIELD OutputRoot.MQMD;
		CREATE FIELD OutputRoot.MQRFH2;
		
		SET OutputRoot.MQRFH2.usr 		= Environment.Variables.usr;
		
		--Eliminar cabeceras SOAP, HTTP
		SET OutputRoot.SOAP 			= NULL;
		SET OutputRoot.HTTPInputHeader 	= NULL;
		SET OutputRoot.Properties 		= NULL;
		
		--Copiar LocalEnvironment
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		--Declarar referencia a lista de excepciones técnicas.
		DECLARE refExceptionList REFERENCE TO InputExceptionList;
		MOVE refExceptionList FIRSTCHILD;
		DECLARE exceptionDetails ROW;

		CALL com.ibus.common.procedures.util.getDescriptionExceptionList(refExceptionList, exceptionDetails);
	
		CREATE FIELD OutputRoot.XMLNSC.exceptionReq.exception;
		DECLARE refOutException REFERENCE TO OutputRoot.XMLNSC.exceptionReq.exception;

		CALL com.ibus.common.procedures.general.createErrorLogMessage(refOutException,exceptionDetails);
		
		--Enviar a registro de error
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		
		--limpiar cabeceras
		SET OutputRoot.MQMD 	= NULL;
		SET OutputRoot.MQRFH2	= NULL;
		SET OutputRoot.XMLNSC 	= NULL;
		
		CREATE FIELD OutputRoot.XMLNSC;
		DECLARE refOut REFERENCE TO OutputRoot.XMLNSC;
		
		DECLARE refEnvUsr REFERENCE TO Environment.Variables.usr;
		SET refEnvUsr.exception = exceptionDetails;
		
		--validar si se crearon las cabeceras para respuesta ws en MQRFH2
		IF(NOT EXISTS(refEnvUsr.response[])) THEN
			CREATE FIELD  refEnvUsr.response.WS;
			DECLARE refResponseWS REFERENCE TO refEnvUsr.response.WS;
			DECLARE refInp REFERENCE TO InputRoot.SOAP.Body ;
			MOVE refInp LASTCHILD;
			
			SET refResponseWS.replyIdentifier = InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
			SET refResponseWS.msgWrapper = REPLACE(FIELDNAME(refInp), REQUEST_WRAPPER, EMPTY_STRING) || RESPONSE_WRAPPER ;
			SET refResponseWS.ns = FIELDNAMESPACE(refInp);
			 
			--move to  message request node 
			MOVE refInp LASTCHILD; 
			SET refResponseWS.respMessage = REPLACE(FIELDNAME(refInp), REQUEST_MSG, RESPONSE_MSG);
			SET refResponseWS.ns1 = FIELDNAMESPACE(refInp);		
			SET refResponseWS.ns2 = COALESCE(FIELDNAMESPACE(refInp.*:RqUID), FIELDNAMESPACE(refInp));
			SET refEnvUsr.log.transactionId = COALESCE(FIELDVALUE(refInp.*:RqUID), UUIDASCHAR);
		
		END IF;
		
		CALL com.ibus.common.procedures.general.createWSErrorMessage(refExceptionList,refEnvUsr,refOut);
		
		--Tomar identificador para responder a cliente
		SET OutputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier 	= CAST(refEnvUsr.response.WS.replyIdentifier AS BLOB);
		RETURN TRUE;
	END;
END MODULE;

/*
 * Crea el mensaje de log para enviar a registrar 
 */
CREATE COMPUTE MODULE LogWSResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--Crear cabeceras de mensaje
		CREATE FIELD OutputRoot.Properties;
		CREATE FIELD OutputRoot.MQMD;
		CREATE FIELD OutputRoot.MQRFH2;
		
		SET OutputRoot.MQRFH2.usr = Environment.Variables.usr;
		
		--Guardar información de environment para envío de error, auditoría 
		DECLARE refInp REFERENCE TO InputRoot.XMLNSC;
		MOVE refInp LASTCHILD;
		MOVE refInp LASTCHILD;
		
		-- VALORES PARA AUDITORIA
		DECLARE refLog REFERENCE TO OutputRoot.MQRFH2.usr.log;
		SET refLog.prevTransactionDate 	= refLog.transactionDate;
		SET refLog.transactionDate 		= CURRENT_TIMESTAMP;
		SET refLog.traceId 				= FACADE_RS_TRACE;
		SET refLog.statusCode			= refInp.*:Status.*:StatusCode;
		SET refLog.serverCode			= COALESCE(refInp.*:Status.*:ServerStatusCode,EMPTY_STRING);
		SET refLog.providerName			= COALESCE(refLog.providerName,NOT_AVAILABLE);
		
		--habilitar parametro para registro de log
		DECLARE refSrvConfiguration REFERENCE TO  OutputRoot.MQRFH2.usr.srvConfiguration;
		DECLARE SAVE_IN_DB CONSTANT CHARACTER '1';
		SET refSrvConfiguration.logs.trace 	= COALESCE(refSrvConfiguration.logs.trace, FACADE_RS_TRACE);
		SET refSrvConfiguration.logs.type	= COALESCE(refSrvConfiguration.logs.type, SAVE_IN_DB);

		SET OutputRoot.XMLNSC  =  InputRoot.XMLNSC;
		
	END;
END MODULE;

/*
* Obtiene el identificador para retornar respuesta web service
*/
CREATE COMPUTE MODULE GetWSReplyIdentifier
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Pasar mensajes.
		SET OutputRoot 	= InputRoot;
		SET OutputRoot.Properties.CodedCharSetId	= 1208;
		
		--Declarar referencia
		DECLARE refMQRFH2 REFERENCE TO OutputRoot.MQRFH2;
		--Guardar variables 	
		SET Environment.Variables.usr = refMQRFH2.usr;
		
		--Tomar identificador para responder a cliente
		SET OutputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier 	= CAST(refMQRFH2.usr.response.WS.replyIdentifier AS BLOB);
		
		SET OutputRoot.MQMD 	= NULL;
		SET OutputRoot.MQRFH2 	= NULL;
		RETURN TRUE;
	END;
END MODULE;
