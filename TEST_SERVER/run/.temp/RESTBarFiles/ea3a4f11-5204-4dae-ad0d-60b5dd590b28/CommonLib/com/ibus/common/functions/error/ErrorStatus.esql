/*
 *
 * File name: ErrorStatus.esql
 *
 * Purpose:   Asignar la información de error o éxito según el caso
 *
 * Authors:   
 *
 * Date      
 * Version:  1.0
 *
 * @copyright  Assist SAS. 2017.  All rights reserved.
 *
 */
BROKER SCHEMA com.ibus.common.functions.error

--Declaración de namespaces
DECLARE ns1 NAMESPACE 'urn://ach.com/xsd/common';

--Declaracion de variables globales
DECLARE StatusCode_100 CONSTANT CHARACTER '100';
DECLARE StatusCode_0   CONSTANT CHARACTER '0';
DECLARE StatusCode_300 CONSTANT CHARACTER '300';
DECLARE StatusCode_700 CONSTANT CHARACTER '700';

DECLARE StatusSev_Error          CONSTANT CHARACTER 'Error';
DECLARE StatusSev_Info           CONSTANT CHARACTER 'Info';
DECLARE StatusDesc_Error_Tecnico CONSTANT CHARACTER 'Error Tecnico';
DECLARE StatusDesc_Tx_Exitosa    CONSTANT CHARACTER 'Transacción Exitosa';
DECLARE StatusDesc_Error_Con_IBS CONSTANT CHARACTER 'Error Conexion IBS';



/*
Función que crea el objeto Status de un Error Tecnico en IBS
*/
CREATE FUNCTION setStatusErrorTec(IN inputRef REFERENCE, INOUT outRef REFERENCE)
BEGIN
	SET outRef.ns1:Status.ns1:StatusCode 		 = StatusCode_100;
	SET outRef.ns1:Status.ns1:ServerStatusCode   = inputRef.CodErrorRPG;
	SET outRef.ns1:Status.ns1:Severity  		 = StatusSev_Error;
	SET outRef.ns1:Status.ns1:StatusDesc		 = StatusDesc_Error_Tecnico;
	
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusCode = inputRef.CodErrorRPG;
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:Severity   = StatusSev_Error;
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusDesc = inputRef.CodError || ' ' || inputRef.NoLinea || ' ' || inputRef.NomProg;
	
END;

/*
Función que crea el objeto Status de un Error de Negocio en IBS
*/
CREATE FUNCTION setStatusErrorBuss(IN inputRef REFERENCE, INOUT outRef REFERENCE)
BEGIN
	SET outRef.ns1:Status.ns1:StatusCode 	   = StatusCode_100;
	SET outRef.ns1:Status.ns1:ServerStatusCode = inputRef.CodError;
	SET outRef.ns1:Status.ns1:Severity  	   = StatusSev_Error;
	SET outRef.ns1:Status.ns1:StatusDesc	   = inputRef.Desc;
	
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusCode = inputRef.CodError;
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:Severity   = StatusSev_Error;
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusDesc = inputRef.Desc;
	
END;

/*
Función que crea el objeto Status de un Error de Conexion IBS
*/
CREATE FUNCTION setStatusErrorConx(IN inputRef REFERENCE, INOUT outRef REFERENCE)
BEGIN
	SET outRef.ns1:Status.ns1:StatusCode = StatusCode_300;
	SET outRef.ns1:Status.ns1:Severity   = StatusSev_Error;
	SET outRef.ns1:Status.ns1:StatusDesc = StatusDesc_Error_Con_IBS;
	
END;

/*
Nueva funcion para el manejo de excepciones y error de conexion : Banca en linea
*/
CREATE FUNCTION setStatusErrorConxExcep(IN inputRef REFERENCE, INOUT outRef REFERENCE)
BEGIN
	
	DECLARE StatusDesc_Error_Proc_Tx CONSTANT CHARACTER 'Error procesando la transaccion';
	
	SET outRef.ns1:Status.ns1:StatusCode 	   = StatusCode_700;
	SET outRef.ns1:Status.ns1:ServerStatusCode = inputRef.body_E.CodError;
	SET outRef.ns1:Status.ns1:Severity  	   = StatusSev_Error;
	SET outRef.ns1:Status.ns1:StatusDesc	   = StatusDesc_Error_Proc_Tx;
	
	IF inputRef.body_E.CodError = '5212' THEN
		SET outRef.ns1:Status.ns1:StatusCode = StatusCode_300;
		SET outRef.ns1:Status.ns1:StatusDesc = StatusDesc_Error_Con_IBS;
	END IF;			
	
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusCode = inputRef.body_E.CodError;
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:Severity   = StatusSev_Error;
	SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusDesc = inputRef.body_E.Desc||inputRef.Filler;
END;


/*
Función que crea el objeto Status de un Error de Conexion IBS
*/
CREATE FUNCTION setStatus(IN inputRef REFERENCE, INOUT outRef REFERENCE)
BEGIN
	
	DECLARE num9998 CONSTANT CHARACTER '9998';
	DECLARE num0002 CONSTANT CHARACTER '0002';
	DECLARE num0001 CONSTANT CHARACTER '0001';
	DECLARE num9999 CONSTANT CHARACTER '9999';
	
	DECLARE desc_SinRegistros CONSTANT CHARACTER 'Consulta sin registros';
	
	IF EXISTS(inputRef.body_R[]) AND (
	   inputRef.header_R.NumRegistroDatos <> num9998 AND 
	   inputRef.header_R.NumRegistroDatos <> num0002) THEN
		SET outRef.ns1:Status.ns1:StatusCode = StatusCode_0;
		SET outRef.ns1:Status.ns1:Severity   = StatusSev_Info;
		SET outRef.ns1:Status.ns1:StatusDesc = StatusDesc_Tx_Exitosa;
	ELSEIF inputRef.header_R.NumRegistroDatos = num0001 THEN
		SET outRef.ns1:Status.ns1:StatusCode  = StatusCode_0;
		SET outRef.ns1:Status.ns1:Severity    = StatusSev_Info;
		SET outRef.ns1:Status.ns1:StatusDesc  = desc_SinRegistros;
	ELSEIF EXISTS(inputRef.body_E[]) AND (
		   inputRef.header_R.NumRegistroDatos <> '9999' AND 
		   inputRef.header_R.NumRegistroDatos <> '0001')THEN
		CALL setStatusErrorBuss(inputRef.body_E, outRef);
	ELSEIF EXISTS(inputRef.body_E[]) AND (
		   inputRef.header_R.NumRegistroDatos = '9999') THEN --Nueva condicion para el manejo de excepciones y error de conexión
	    SET inputRef.Filler = CAST(inputRef.Filler AS CHARACTER CCSID 850 );
		CALL setStatusErrorConxExcep(inputRef, outRef);
	ELSEIF EXISTS(inputRef.body_T[]) THEN
		CALL setStatusErrorTec(inputRef.body_T, outRef);
	ELSE
		CALL setStatusErrorConx(inputRef, outRef);
	END IF;
		
END;

/*
Función que crea el objeto Status de un Error de Conexion IBS Valida si la falta de Body se debe manejar como error
*/
CREATE FUNCTION setStatusWithBody(IN inputRef REFERENCE, INOUT outRef REFERENCE, IN requiereBody BOOLEAN)
BEGIN
	IF EXISTS(inputRef.body_R[]) OR (requiereBody IS FALSE) THEN
		SET outRef.ns1:Status.ns1:StatusCode = StatusCode_0;
		SET outRef.ns1:Status.ns1:Severity   = StatusSev_Info;
		SET outRef.ns1:Status.ns1:StatusDesc = StatusDesc_Tx_Exitosa;
	ELSEIF EXISTS(inputRef.body_E[]) THEN
		CALL setStatusErrorBuss(inputRef.body_E, outRef);
	ELSEIF EXISTS(inputRef.body_T[]) THEN
		CALL setStatusErrorTec(inputRef.body_T, outRef);
	ELSE
		CALL setStatusErrorConx(inputRef, outRef);
	END IF;
		
END;


/*
Función que crea el objeto Status de un Error de Conexion IBS
*/
CREATE FUNCTION setStatusEvertec(IN inputRef REFERENCE, INOUT outRef REFERENCE)
BEGIN
	
	IF inputRef.CodRespuesta = '00' THEN 
		SET outRef.ns1:Status.ns1:StatusCode = StatusCode_0;
		SET outRef.ns1:Status.ns1:StatusCode = inputRef.CodRespuesta;
		SET outRef.ns1:Status.ns1:Severity   = StatusSev_Info;
		SET outRef.ns1:Status.ns1:StatusDesc = StatusDesc_Tx_Exitosa;
		
		SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusCode = inputRef.CodRespuesta;
		SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:Severity   = StatusSev_Info;
		SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusDesc = inputRef.DescCodRespuesta;
		
	ELSEIF EXISTS(inputRef.CodRespuesta[]) THEN
		SET outRef.ns1:Status.ns1:StatusCode 	   = StatusCode_100;
		SET outRef.ns1:Status.ns1:ServerStatusCode = inputRef.CodRespuesta;
		SET outRef.ns1:Status.ns1:Severity  	   = StatusSev_Error;
		SET outRef.ns1:Status.ns1:StatusDesc	   = 'Error en la Transacción';
		
		SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusCode = inputRef.CodRespuesta;
		SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:Severity   = StatusSev_Error;
		SET outRef.ns1:Status.ns1:AdditionalStatus.ns1:StatusDesc = inputRef.DescCodRespuesta;
	ELSE
		SET outRef.ns1:Status.ns1:StatusCode = StatusCode_300;
		SET outRef.ns1:Status.ns1:Severity   = StatusSev_Error;
		SET outRef.ns1:Status.ns1:StatusDesc = 'Error de conexión Evertec';
	END IF;
		
END;
