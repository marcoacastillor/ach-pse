/*
 *
 * File name: LogDAO.esql
 *
 * Purpose:   ESQL con procedimientos comunes
 *
 * Authors:   Assist
 *            

 *
 * Version:   1.0
 *
 * @copyright Assist  All rights reserved.
 *
 */
BROKER SCHEMA com.ibus.common.procedures.general

DECLARE DELIMITER CONSTANT CHARACTER ' : ';
DECLARE EMPTY_STRING CONSTANT CHARACTER '';


/*
 * Procedimiento encargado de obtener los detalles cuando ocurre una excepcion
 *
 * Parameters:
 * IN: REFERENCE refOutException - Referencia del arbol de excepciones
 * IN: REFERENCE exceptionDetails  - Detalles de la excepcion
 *
 */
CREATE PROCEDURE createErrorLogMessage(IN refOutException REFERENCE, IN exceptionDetails REFERENCE)
BEGIN
	
	--Creacion del mensaje de error de fachada
	SET refOutException.code	= exceptionDetails.errorCode;
	SET refOutException.desc	= exceptionDetails.errorName || ' at ' || exceptionDetails.errorNodeName || DELIMITER; 
	SET refOutException.desc	= exceptionDetails.errorDesc || DELIMITER || exceptionDetails.stackDesc;
END;	
 
/*
 * Procedimiento encargado de devolver un mensaje de Error estándar WS
 *
 * Parameters:
 * IN: REFERENCE refExceptionList - Referencia del arbol de excepciones
 * IN: REFERENCE refExceptionList - Referencia detalles del servicio
 * IN: REFERENCE refOut - Referencia del arbol de respuesta
 *
 */
CREATE PROCEDURE createWSErrorMessage(IN refExceptionList REFERENCE, IN refEnvUsr REFERENCE, IN refOut reference)
BEGIN
	
	--Tomar mensaje del arbol de Exception y generar mensaje de respuesta para fachada
	DECLARE errorNumber CHARACTER;
	CALL com.ibus.common.procedures.util.searchErrorNumber(refExceptionList, errorNumber);
	
	DECLARE refResponseWS REFERENCE TO refEnvUsr.response.WS;
	DECLARE ns  NAMESPACE refResponseWS.ns;
	DECLARE ns1 NAMESPACE refResponseWS.ns1;
	DECLARE ns2 NAMESPACE refResponseWS.ns2;
	DECLARE wrapperMessage CHARACTER COALESCE(refResponseWS.msgWrapper, 'ErrorMsg');
	DECLARE respMessage CHARACTER refResponseWS.respMessage; 
	
	--Crear mensaje WS con la descricpion del error
	CREATE FIELD refOut.ns:{wrapperMessage}.ns1:{respMessage};
	MOVE refOut TO refOut.ns:{wrapperMessage}.ns1:{respMessage};
	
	-- ID de Transacción
	SET refOut.ns2:RqUID = COALESCE(refEnvUsr.log.transactionId,EMPTY_STRING);
	
	--TO-DO obterner excepción de tabla de homologaciones--------------------------------------PENDIENTE
	CREATE FIELD refOut.ns2:Status;
	MOVE refOut TO refOut.ns2:Status;
	SET refOut.ns2:StatusCode = errorNumber;
	SET refOut.ns2:Severity   = 'Error';
	SET refOut.ns2:StatusDesc = 'Error procesando la transaccion';
	
	-- adicionar estatus adicional
	CREATE FIELD refOut.ns2:AdditionalStatus;
	MOVE refOut TO refOut.ns2:AdditionalStatus;
	SET refOut.ns2:StatusCode 	= refEnvUsr.exception.errorCode;
	SET refOut.ns2:Severity 	= 'Error';
	SET refOut.ns2:StatusDesc 	= refEnvUsr.exception.errorName || DELIMITER || refEnvUsr.exception.stackDesc || DELIMITER || refEnvUsr.exception.errorDesc ;

	MOVE refOut PARENT;
	MOVE refOut PARENT;

	
	
	--Establecer prefijos de Namespaces
	MOVE refOut PARENT;
	SET refOut.(XMLNSC.NamespaceDecl)xmlns:ns = ns;
	SET refOut.(XMLNSC.NamespaceDecl)xmlns:ns1 = ns1;
	SET refOut.(XMLNSC.NamespaceDecl)xmlns:ns2 = ns2;
END;

/*********************************************************************
    * PROCEDURE que carga en el arbol Root.MQRFH2.usr.srvConfiguration 
    * el ReplyTQ, ReplyToQMgr y el CorrelId
    * IN refInp: Referencia de objeto de entrada
    * OUT refOut: Referencia de objeto de Salida  
********************************************************************/
CREATE PROCEDURE guardaReplyToQ(IN refInp REFERENCE, INOUT refOut REFERENCE, IN correl BOOLEAN)
	BEGIN
		
		IF EXISTS(refOut.MQRFH2.usr.srvConfiguration.Correlation[]) IS FALSE THEN
			CREATE FIELD refOut.MQRFH2.usr.srvConfiguration.Correlation;
		END IF;	
		MOVE refOut TO refOut.MQRFH2.usr.srvConfiguration;

		CREATE LASTCHILD OF refOut.Correlation NAME 'Reply';
		MOVE refOut TO refOut.Correlation;
		MOVE refOut LASTCHILD;
		
		SET refOut.ReplyToQ = refInp.MQMD.ReplyToQ;
		IF correl = TRUE THEN
			SET refOut.ReplyToQMgr = refInp.MQMD.ReplyToQMgr;
			SET refOut.CorrelId    = refInp.MQMD.MsgId;
		END IF;
	END;	
	
/*********************************************************************
    * PROCEDURE que recupera del arbol Root.MQRFH2.usr.srvConfiguration 
    * el ReplyTQ, ReplyToQMgr y el CorrelId
    * IN refInp: Referencia de objeto de entrada
    * OUT refOut: Referencia de objeto de Salida
********************************************************************/
CREATE PROCEDURE recuperaReplyToQ(IN refInp REFERENCE, INOUT refOut REFERENCE, IN correl BOOLEAN)
	BEGIN
		
		--SET refOut.MQRFH2 = refInp.MQRFH2;
		MOVE refInp TO refInp.MQRFH2.usr.srvConfiguration;
		IF EXISTS(refInp.Correlation.Reply[]) THEN
		  MOVE refInp TO refInp.Correlation.Reply[<];
		  SET refOut.MQMD.ReplyToQ = refInp.ReplyToQ;			
			IF correl = TRUE THEN
				SET refOut.MQMD.ReplyToQMgr = refInp.ReplyToQMgr;
				SET refOut.MQMD.MsgId    = CAST(refInp.CorrelId AS BLOB);
			END IF;
		END IF;	
		MOVE refOut TO refOut.MQRFH2.usr.srvConfiguration.Correlation;
		SET refOut.Reply[<] = NULL;
	END;	

	
/*
 * Procedimiento encargado de devolver un mensaje de Error estándar 
 *
 * Parameters:
 * IN: REFERENCE refExceptionList - Referencia del arbol de excepciones
 * IN: REFERENCE refExceptionList - Referencia detalles del servicio
 * IN: REFERENCE refOut - Referencia del arbol de respuesta
 *
 */
CREATE PROCEDURE createRESTErrorsMessage(IN refExceptionList REFERENCE, IN refEnvUsr REFERENCE, IN refOut reference)
BEGIN
	
	--Tomar mensaje del arbol de Exception y generar mensaje de respuesta para fachada
	DECLARE errorNumber CHARACTER;
	CALL com.ibus.common.procedures.util.searchErrorNumber(refExceptionList, errorNumber);
	
	DECLARE refResponseREST REFERENCE TO refEnvUsr.response.REST;
	DECLARE wrapperMessage CHARACTER COALESCE(refResponseREST.msgWrapper, 'ErrorMsg');
	
	--Crear mensaje REST con la descricpion del error
	
	SET refOut.meta.messageUuid = refEnvUsr.HTTPInputHeader."Message-Uuid";
	SET refOut.meta.requestDt =COALESCE(refEnvUsr.HTTPInputHeader."requestdt",CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss.SSSZZZ'));
	SET refOut.meta.requestAppId = refEnvUsr.HTTPInputHeader."Request-App-Id";
	
	SET refOut.statusCode = refEnvUsr.errorCode;
	SET refOut.statusDesc = refEnvUsr.errorDesc;
	--SET refOut.headers.timestamp = CURRENT_TIMESTAMP;
	
	--SET refOut.messageResponse.responseCode = refEnvUsr.errorCode;
	--SET refOut.messageResponse.responseMessage = refEnvUsr.errorDesc;
		
	CREATE FIELD refOut.errors IDENTITY (JSON.Array)errors;	
	SET refOut.errors.Item[1].errorCode = COALESCE(refEnvUsr.exception.errorCode, errorNumber);
	SET refOut.errors.Item[1].errorDetail = COALESCE(refEnvUsr.exception.errorName || DELIMITER || refEnvUsr.exception.stackDesc || DELIMITER || refEnvUsr.exception.errorDesc, 'Error procesando la transaccion');	
	
END;
	

/*
 * Procedimiento encargado de devolver un mensaje de Error estándar REST
 *
 * Parameters:
 * IN: REFERENCE refExceptionList - Referencia del arbol de excepciones
 * IN: REFERENCE refExceptionList - Referencia detalles del servicio
 * IN: REFERENCE refOut - Referencia del arbol de respuesta
 *
 */
CREATE PROCEDURE createRESTErrorMessage(IN statusCode INTEGER, IN statusDesc CHARACTER, IN erCode CHARACTER, IN erDesc CHARACTER, IN refOut reference)
BEGIN
	
	--Crear mensaje REST con la descricpion del error
	
	SET refOut.statusCode = statusCode;
	SET refOut.statusDesc = statusDesc; 
	
	CREATE FIELD refOut.errors IDENTITY (JSON.Array)errors;	
	SET refOut.errors.Items[1].code = erCode;
	SET refOut.errors.Items[1].detail = erDesc;
END;


/*
* Función que crea un mensaje de error en los servicios específicos
* CreatedBy: Marco
* CreatedAt: 25-10-2024
*/
CREATE COMPUTE MODULE specificPrepareError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- setar código statusHttpCode
		SET OutputRoot.HTTPReplyHeader."Content-Type" 					= 'application/json';
		SET OutputRoot.HTTPReplyHeader."X-Original-HTTP-Status-Code" 	= 500;
		
		-- copiar información de sesión
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		--Declarar referencia a lista de excepciones.
		DECLARE refExceptionList REFERENCE TO InputExceptionList;
		
		DECLARE flujo CHARACTER Environment.flujo;
		DECLARE codeError, nameError, descError CHARACTER '';
		
		-- sacar información técnica desde inputExceptionList
		CALL com.ibus.common.procedures.util.getDescriptionExceptionListV2(refExceptionList, codeError, nameError, descError); 
		
		-- crear mensaje de respuesta
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE refOut REFERENCE TO OutputRoot.JSON.Data;
		
		-- setear valores de respuesta
		SET refOut.headers.httpStatusCode 			= 500;
		SET refOut.headers.httpStatusDesc 			= 'Error';
		SET refOut.headers.messageUUID				= 'pendiente-mapeo';
		SET refOut.headers.requestDateTime			= CURRENT_TIMESTAMP;
		SET refOut.headers.requestAppId				= 'pendiente-mapeo';
		
		SET refOut.messageResponse.responseCode		= 'PSE.500';
		SET refOut.messageResponse.responseMessage	= 'Error en servicio';
		SET refOut.messageResponse.responseDetail	= nameError;		
		
		SET refOut.(JSON.Array)errors.d[1].errorCode 	= codeError;
		SET refOut.(JSON.Array)errors.d[1].errorDetail 	= descError;
		
		RETURN TRUE;
	END;
	
END MODULE;




CREATE COMPUTE MODULE specificPrepareErrorAggregation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- declarar referencias a objetos de entrada
		DECLARE refEchoMessage REFERENCE TO InputRoot.ComIbmAggregateReplyBody.EchoMessage;
		MOVE refEchoMessage LASTCHILD;
		MOVE refEchoMessage LASTCHILD;
		
		-- setar código statusHttpCode
		SET OutputRoot.HTTPReplyHeader."Content-Type" 					= 'application/json';
		SET OutputRoot.HTTPReplyHeader."X-Original-HTTP-Status-Code" 	= 500;
		
		-- copiar información de sesión
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		--Declarar referencia a lista de excepciones.
		DECLARE refExceptionList REFERENCE TO InputExceptionList;
		
		DECLARE flujo CHARACTER Environment.flujo;
		DECLARE codeError, nameError, descError CHARACTER '';
		
		-- sacar información técnica desde inputExceptionList
		CALL com.ibus.common.procedures.util.getDescriptionExceptionListV2(refExceptionList, codeError, nameError, descError); 
		
		-- crear mensaje de respuesta
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE refOut REFERENCE TO OutputRoot.JSON.Data;
		
		-- setear valores de respuesta
		SET refOut.headers.httpStatusCode 			= 500;
		SET refOut.headers.httpStatusDesc 			= 'Error';
		SET refOut.headers.messageUUID				= 'pendiente-mapeo';
		SET refOut.headers.requestDateTime			= CURRENT_TIMESTAMP;
		SET refOut.headers.requestAppId				= 'pendiente-mapeo';
		
		SET refOut.messageResponse.responseCode		= 'PSE.500';
		SET refOut.messageResponse.responseMessage	= 'Error en servicio';
		SET refOut.messageResponse.responseDetail	= nameError;		
		
		SET refOut.(JSON.Array)errors.d[1].errorCode 	= codeError;
		SET refOut.(JSON.Array)errors.d[1].errorDetail 	= descError;
		
		RETURN TRUE;
	END;
	
END MODULE;